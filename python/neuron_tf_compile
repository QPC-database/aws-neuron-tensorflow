#!/usr/bin/env python
#
# Copyright (C) 2019, Amazon.com. All Rights Reserved
#
import os
import argparse
import json
import tensorflow.neuron as tfn


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('model_dir', help='path to input model dir')
    parser.add_argument('export_dir', help='path to output model dir')
    parser.add_argument(
        '--batch_size', action='store', default=1, type=int,
        help='batch size of input data, used for shape calculation. Default: 1')
    parser.add_argument(
        '--tag_set', default=None,
        help="tag-set of graph in SavedModel to show, separated by ','")
    parser.add_argument(
        '--signature_def_key', default=None,
        help='key of SignatureDef to display input(s) and output(s) for')
    parser.add_argument(
        '--input_shape_dict', action='store', default=None,
        help='Serialized dictionary for inputs names and shapes (JSON).')
    parser.add_argument('--compiler_workdir', help='path to compiler workdir')
    args = parser.parse_args()
    model_shape_feed_dict = None
    if args.input_shape_dict is not None:
        model_shape_feed_dict = json.loads(args.input_shape_dict)
    if args.tag_set is not None:
        args.tag_set = args.tag_set.split(',')
    if args.signature_def_key is not None:
        args.signature_def_key = args.signature_def_key.split(',')
    tfn.saved_model.compile(
        args.model_dir, args.export_dir, batch_size=args.batch_size,
        model_shape_feed_dict=model_shape_feed_dict, tags=args.tag_set,
        signature_def_key=args.signature_def_key, compiler_workdir=args.compiler_workdir)


if __name__ == '__main__':
    """
    Commandline tools to compile a saved model into a Neuron optimized saved model.
    Internally it calls tf.neuron.saved_model.compile()
    Note: This file should be placed in some location which is on the PATH.
    Args:
        model_dir: The path of the original `SavedModel`.
        export_dir: The path to which the neuron-optimized `SavedModel` will be stored.
        batch_size: (Optional) Batch size used in inference.
        tag_set: (Optional) Set of string tags to identify the required `MetaGraphDef`.
                These should correspond to the tags used when saving the variables using
                the `SavedModel` `save()` API.
        signature_def_key: (Optional) String specifying the signature to use. If
                `None`, then `saved_model.DEFAULT_SERVING_SIGNATURE_DEF_KEY` is used.
        input_shape_dict: json format shape dictionary for input tensors.
    Returns:
        None
    Currently supports input/output directory from local disk.
    """
    main()
